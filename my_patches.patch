diff --git a/server.js b/server.js
index 7ba16d7..ac017d0 100644
--- a/server.js
+++ b/server.js
@@ -1,21 +1,23 @@
-import express from 'express';
-import Database from 'better-sqlite3';
+import express from "express";
+import Database from "better-sqlite3";
 
 const app = express();
 
 app.use(express.json());
 
-app.get('/', (req, res) => {
-  return res.status(200).send({'message': 'SHIPTIVITY API. Read documentation to see API docs'});
+app.get("/", (req, res) => {
+  return res
+    .status(200)
+    .send({ message: "SHIPTIVITY API. Read documentation to see API docs" });
 });
 
 // We are keeping one connection alive for the rest of the life application for simplicity
-const db = new Database('./clients.db');
+const db = new Database("./clients.db");
 
 // Don't forget to close connection when server gets terminated
 const closeDb = () => db.close();
-process.on('SIGTERM', closeDb);
-process.on('SIGINT', closeDb);
+process.on("SIGTERM", closeDb);
+process.on("SIGINT", closeDb);
 
 /**
  * Validate id input
@@ -26,25 +28,27 @@ const validateId = (id) => {
     return {
       valid: false,
       messageObj: {
-      'message': 'Invalid id provided.',
-      'long_message': 'Id can only be integer.',
+        message: "Invalid id provided.",
+        long_message: "Id can only be integer.",
       },
     };
   }
-  const client = db.prepare('select * from clients where id = ? limit 1').get(id);
+  const client = db
+    .prepare("select * from clients where id = ? limit 1")
+    .get(id);
   if (!client) {
     return {
       valid: false,
       messageObj: {
-      'message': 'Invalid id provided.',
-      'long_message': 'Cannot find client with that id.',
+        message: "Invalid id provided.",
+        long_message: "Cannot find client with that id.",
       },
     };
   }
   return {
     valid: true,
   };
-}
+};
 
 /**
  * Validate priority input
@@ -55,34 +59,41 @@ const validatePriority = (priority) => {
     return {
       valid: false,
       messageObj: {
-      'message': 'Invalid priority provided.',
-      'long_message': 'Priority can only be positive integer.',
+        message: "Invalid priority provided.",
+        long_message: "Priority can only be positive integer.",
       },
     };
   }
   return {
     valid: true,
-  }
-}
+  };
+};
 
 /**
  * Get all of the clients. Optional filter 'status'
  * GET /api/v1/clients?status={status} - list all clients, optional parameter status: 'backlog' | 'in-progress' | 'complete'
  */
-app.get('/api/v1/clients', (req, res) => {
+app.get("/api/v1/clients", (req, res) => {
   const status = req.query.status;
   if (status) {
     // status can only be either 'backlog' | 'in-progress' | 'complete'
-    if (status !== 'backlog' && status !== 'in-progress' && status !== 'complete') {
+    if (
+      status !== "backlog" &&
+      status !== "in-progress" &&
+      status !== "complete"
+    ) {
       return res.status(400).send({
-        'message': 'Invalid status provided.',
-        'long_message': 'Status can only be one of the following: [backlog | in-progress | complete].',
+        message: "Invalid status provided.",
+        long_message:
+          "Status can only be one of the following: [backlog | in-progress | complete].",
       });
     }
-    const clients = db.prepare('select * from clients where status = ?').all(status);
+    const clients = db
+      .prepare("select * from clients where status = ?")
+      .all(status);
     return res.status(200).send(clients);
   }
-  const statement = db.prepare('select * from clients');
+  const statement = db.prepare("select * from clients");
   const clients = statement.all();
   return res.status(200).send(clients);
 });
@@ -91,13 +102,15 @@ app.get('/api/v1/clients', (req, res) => {
  * Get a client based on the id provided.
  * GET /api/v1/clients/{client_id} - get client by id
  */
-app.get('/api/v1/clients/:id', (req, res) => {
-  const id = parseInt(req.params.id , 10);
+app.get("/api/v1/clients/:id", (req, res) => {
+  const id = parseInt(req.params.id, 10);
   const { valid, messageObj } = validateId(id);
   if (!valid) {
     res.status(400).send(messageObj);
   }
-  return res.status(200).send(db.prepare('select * from clients where id = ?').get(id));
+  return res
+    .status(200)
+    .send(db.prepare("select * from clients where id = ?").get(id));
 });
 
 /**
@@ -114,23 +127,51 @@ app.get('/api/v1/clients/:id', (req, res) => {
  *      priority (optional): integer,
  *
  */
-app.put('/api/v1/clients/:id', (req, res) => {
-  const id = parseInt(req.params.id , 10);
+app.put("/api/v1/clients/:id", (req, res) => {
+  const id = parseInt(req.params.id, 10);
   const { valid, messageObj } = validateId(id);
   if (!valid) {
-    res.status(400).send(messageObj);
+    return res.status(400).send(messageObj);
   }
 
   let { status, priority } = req.body;
-  let clients = db.prepare('select * from clients').all();
-  const client = clients.find(client => client.id === id);
+  let clients = db.prepare("select * from clients").all();
+  const client = clients.find((client) => client.id === id);
 
   /* ---------- Update code below ----------*/
 
+  // If status is provided, update the status of the client
+  if (status) {
+    db.prepare("UPDATE clients SET status = ? WHERE id = ?").run(status, id);
+  }
+
+  // If priority is provided, update the priority of the client and adjust the priority of other clients accordingly
+  if (priority) {
+    const { valid, messageObj } = validatePriority(priority);
+    if (!valid) {
+      return res.status(400).send(messageObj);
+    }
+
+    // Begin a transaction
+    db.transaction(() => {
+      // Decrease the priority of clients with a priority greater than or equal to the new priority
+      db.prepare(
+        "UPDATE clients SET priority = priority + 1 WHERE priority >= ? AND status = ?"
+      ).run(priority, client.status);
+
+      // Update the priority of the current client
+      db.prepare("UPDATE clients SET priority = ? WHERE id = ?").run(
+        priority,
+        id
+      );
+    })();
+  }
 
+  // Fetch the updated list of clients
+  clients = db.prepare("select * from clients").all();
 
   return res.status(200).send(clients);
 });
 
 app.listen(3001);
-console.log('app running on port ', 3001);
+console.log("app running on port ", 3001);
